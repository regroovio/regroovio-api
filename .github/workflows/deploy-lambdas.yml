name: Deploy Lambdas

on:
  workflow_dispatch:
    inputs:
      stage:
        description: "The stage to deploy to (prod or dev)"
        type: choice
        options:
          - prod
          - dev
        required: true

env:
  AWS_REGION: us-east-1

jobs:
  before_deploy:
    name: Before Deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Updtade Parameter Store
        run: |
          COGNITO_USER_POOL_ID=$(aws cognito-idp list-user-pools --max-results 20 | jq -r '.UserPools[] | select(.Name | contains("${{ inputs.stage }}")).Id')
          COGNITO_CLIENT_ID=$(aws cognito-idp list-user-pool-clients --user-pool-id ${COGNITO_USER_POOL_ID} --max-results 20 | jq -r '.UserPoolClients[] | select(.ClientName | contains("${{ inputs.stage }}")) | .ClientId')
          COGNITO_CLIENT_SECRET=$(aws cognito-idp describe-user-pool-client --user-pool-id ${COGNITO_USER_POOL_ID} --client-id ${COGNITO_CLIENT_ID} | jq -r '.UserPoolClient.ClientSecret')
          aws ssm put-parameter \
            --name "parameters-${{ inputs.stage }}" \
            --type "String" \
            --value "COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID},\nCOGNITO_CLIENT_ID=${COGNITO_CLIENT_ID},
            COGNITO_CLIENT_SECRET=${COGNITO_CLIENT_SECRET},
            STAGE=${{ inputs.stage }},
            ${{ secrets.LAMBDAS_ENV }}" \
            --overwrite

  deploy_lambdas:
    runs-on: ubuntu-latest
    needs: before_deploy
    strategy:
      matrix:
        function:
          # Main Functions
          - name: "regroovio-random-tracks"
            path: "./main/api/radio/random-tracks"

          # Main API
          - name: "regroovio-signup"
            path: "./main/api/auth/signup"

          - name: "regroovio-confirm"
            path: "./main/api/auth/confirm"

          - name: "regroovio-login"
            path: "./main/api/auth/login"

          # Bandcamp Workers
          - name: "bandcamp-worker-downloader"
            path: "./bandcamp/workers/downloader"

          - name: "bandcamp-worker-processor"
            path: "./bandcamp/workers/processor"

          - name: "bandcamp-worker-wishlist"
            path: "./bandcamp/workers/users/wishlist"

          - name: "bandcamp-worker-collection"
            path: "./bandcamp/workers/users/collection"

          - name: "bandcamp-worker-feed"
            path: "./bandcamp/workers/users/feed"

          # Bandcamp Crons
          - name: "bandcamp-cron-processor"
            path: "./bandcamp/crons/processor"

          - name: "bandcamp-cron-daily"
            path: "./bandcamp/crons/scrapers/daily"

          - name: "bandcamp-cron-custom"
            path: "./bandcamp/crons/scrapers/custom"

          # Sporify Token Scraper
          - name: "spotify-token"
            path: "./spotify/scrap-token"

          # Sporify Tracks API
          - name: "spotify-get-top"
            path: "./spotify/api/tracks/get-top"

          - name: "spotify-get-likes"
            path: "./spotify/api/tracks/get-likes"

          - name: "spotify-add-tracks"
            path: "./spotify/api/tracks/add-tracks"

          - name: "spotify-get-playlist"
            path: "./spotify/api/tracks/get-playlist"

          - name: "spotify-get-audio-features"
            path: "./spotify/api/tracks/get-audio-features"

          - name: "spotify-get-audio-analysis"
            path: "./spotify/api/tracks/get-audio-analysis"

          # Sporify Auth API
          - name: "spotify-login"
            path: "./spotify/api/auth/login"

          - name: "spotify-callback"
            path: "./spotify/api/auth/callback"

          - name: "spotify-refresh"
            path: "./spotify/api/auth/refresh"
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: |
          cd ${{ matrix.function.path }}
          npm ci --production

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ${{ matrix.function.path }}/node_modules
          key: ${{ matrix.function.path }}-${{ inputs.stage }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ matrix.function.path }}-${{ inputs.stage }}-

      - name: Package Lambda function
        run: |
          cd ${{ matrix.function.path }}
          zip -r ${{ matrix.function.name }}-${{ inputs.stage }}.zip .
          aws s3 cp ${{ matrix.function.name }}-${{ inputs.stage }}.zip s3://lambdas-regroovio-${{ inputs.stage }}
          rm ${{ matrix.function.name }}-${{ inputs.stage }}.zip

      - name: Update Lambda function code
        run: |
          aws lambda update-function-code \
            --function-name ${{ matrix.function.name }}-${{ inputs.stage }} \
            --s3-bucket lambdas-regroovio-${{ inputs.stage }} \
            --s3-key ${{ matrix.function.name }}-${{ inputs.stage }}.zip

      - name: Wait for Lambda update
        run: |
          aws lambda wait function-updated --function-name ${{ matrix.function.name }}-${{ inputs.stage }}

      - name: Update Lambda function configuration
        run: |
          aws lambda update-function-configuration \
            --function-name ${{ matrix.function.name }}-${{ inputs.stage }} \
            --region us-east-1 \
            --environment "Variables={STAGE=${{ inputs.stage }}}
