name: Deploy Lambdas

on:
  workflow_dispatch:
    inputs:
      stage:
        description: "The stage to deploy to (prod or dev)"
        type: choice
        options:
          - prod
          - dev
        required: true

      functions:
        description: "The function to deploy"
        type: choice
        options:
          - "all"
          - "regroovio-signup"
          - "regroovio-confirm"
          - "regroovio-login"
          - "regroovio-random-tracks"
          - "regroovio-downloader"
          - "regroovio-recognizer"
          - "bandcamp-wishlist"
          - "bandcamp-collection"
          - "bandcamp-feed"
          - "bandcamp-daily"
          - "bandcamp-custom"
          - "spotify-token"
          - "spotify-get-top"
          - "spotify-get-likes"
          - "spotify-add-track"
          - "spotify-remove-track"
          - "spotify-get-playlist"
          - "spotify-get-audio-features"
          - "spotify-get-audio-analysis"
          - "spotify-search-track"
          - "spotify-login"
          - "spotify-callback"
          - "spotify-refresh"
        required: true

env:
  AWS_REGION: us-east-1

jobs:
  before_deploy:
    name: Before Deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update Parameter Store
        run: |
          COGNITO_USER_POOL_ID=$(aws cognito-idp list-user-pools --max-results 20 | jq -r '.UserPools[] | select(.Name | contains("${{ inputs.stage }}")).Id')
          COGNITO_CLIENT_ID=$(aws cognito-idp list-user-pool-clients --user-pool-id ${COGNITO_USER_POOL_ID} --max-results 20 | jq -r '.UserPoolClients[] | select(.ClientName | contains("${{ inputs.stage }}")) | .ClientId')
          COGNITO_CLIENT_SECRET=$(aws cognito-idp describe-user-pool-client --user-pool-id ${COGNITO_USER_POOL_ID} --client-id ${COGNITO_CLIENT_ID} | jq -r '.UserPoolClient.ClientSecret')
          aws ssm put-parameter \
            --name "parameters-${{ inputs.stage }}" \
            --type "String" \
            --value "
            COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID},
            COGNITO_CLIENT_ID=${COGNITO_CLIENT_ID},
            COGNITO_CLIENT_SECRET=${COGNITO_CLIENT_SECRET},
            STAGE=${{ inputs.stage }},
            ${{ secrets.LAMBDAS_ENV }}" \
            --overwrite

  filter_functions:
    runs-on: ubuntu-latest
    needs: before_deploy
    outputs:
      available_functions: ${{ steps.filter_functions.outputs.filtered_functions }}
    steps:
      - name: Filter functions
        id: filter_functions
        run: |
          selected_function="${{ github.event.inputs.functions }}"
          if [ "$selected_function" = "all" ]; then
            available_functions='[
              # Regroovio
              {"name": "regroovio-login", "path": "./main/api/auth/login"},
              {"name": "regroovio-signup", "path": "./main/api/auth/signup"},
              {"name": "regroovio-confirm", "path": "./main/api/auth/confirm"},

              {"name": "regroovio-random-tracks", "path": "./main/api/tracks/random-tracks"},
              {"name": "regroovio-random-tracks", "path": "./main/api/tracks/random-tracks"},
              {"name": "regroovio-random-tracks", "path": "./main/api/tracks/random-tracks"},
              {"name": "regroovio-random-tracks", "path": "./main/api/tracks/random-tracks"},

              {"name": "regroovio-downloader", "path": "./main/app/downloader"}
              {"name": "regroovio-recognizer", "path": "./main/app/recognizer"}

              # Bancamp
              {"name": "bandcamp-wishlist", "path": "./bandcamp/wishlist"}
              {"name": "bandcamp-collection", "path": "./bandcamp/collection"}
              {"name": "bandcamp-feed", "path": "./bandcamp/feed"}
              {"name": "bandcamp-daily", "path": "./bandcamp/daily"}
              {"name": "bandcamp-custom", "path": "./bandcamp/custom"}

              # Sporify
              {"name": "spotify-refresh", "path": "./spotify/api/auth/refresh"}
              {"name": "spotify-login", "path": "./spotify/api/auth/login"}
              {"name": "spotify-callback", "path": "./spotify/api/auth/callback"}

              {"name": "spotify-get-top", "path": "./spotify/api/tracks/get-top"}
              {"name": "spotify-get-likes", "path": "./spotify/api/tracks/get-likes"}
              {"name": "spotify-add-track", "path": "./spotify/api/tracks/add-track"}
              {"name": "spotify-remove-track", "path": "./spotify/api/tracks/remove-track"}
              {"name": "spotify-get-playlist", "path": "./spotify/api/tracks/get-playlist"}
              {"name": "spotify-get-audio-features", "path": "./spotify/api/tracks/get-audio-features"}
              {"name": "spotify-get-audio-analysis", "path": "./spotify/api/tracks/get-audio-analysis"}
              {"name": "spotify-search-track", "path": "./spotify/api/tracks/search-track"}
              {"name": "spotify-search-track", "path": "./spotify/api/tracks/search-track"}

              {"name": "spotify-token", "path": "./spotify/scrap-token"}
            ]'
          else
            available_functions=$(jq -n --arg name "$selected_function" --arg path "./path/to/$selected_function" '[{ "name": $name, "path": $path }]')
          fi
          echo "filtered_functions=${available_functions}" >> $GITHUB_ENV

  deploy_lambdas:
    runs-on: ubuntu-latest
    needs: [before_deploy, filter_functions]
    strategy:
      matrix:
        function: ${{fromJson(needs.filter_functions.outputs.available_functions)}}
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: |
          cd ${{ matrix.function.path }}
          npm ci --production

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ${{ matrix.function.path }}/node_modules
          key: ${{ matrix.function.path }}-${{ inputs.stage }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ matrix.function.path }}-${{ inputs.stage }}-

      - name: Package Lambda function
        run: |
          cd ${{ matrix.function.path }}
          zip -r ${{ matrix.function.name }}-${{ inputs.stage }}.zip .
          aws s3 cp ${{ matrix.function.name }}-${{ inputs.stage }}.zip s3://lambdas-regroovio-${{ inputs.stage }}
          rm ${{ matrix.function.name }}-${{ inputs.stage }}.zip

      - name: Update Lambda function code
        run: |
          aws lambda update-function-code \
            --function-name ${{ matrix.function.name }}-${{ inputs.stage }} \
            --s3-bucket lambdas-regroovio-${{ inputs.stage }} \
            --s3-key ${{ matrix.function.name }}-${{ inputs.stage }}.zip

      - name: Wait for Lambda update
        run: |
          aws lambda wait function-updated --function-name ${{ matrix.function.name }}-${{ inputs.stage }}

      - name: Update Lambda function configuration
        run: |
          aws lambda update-function-configuration \
          --function-name ${{ matrix.function.name }}-${{ inputs.stage }} \
          --region us-east-1 \
          --environment "Variables={
          STAGE=\"${{ inputs.stage }}\",
          ${{ secrets.LAMBDAS_ENV }}
          }"
