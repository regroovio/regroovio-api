name: Deploy Lambdas

on:
  workflow_dispatch:
    inputs:
      stage:
        description: "The stage to deploy to (prod or dev)"
        type: choice
        options:
          - prod
          - dev
        required: true

      functions:
        description: "The function to deploy"
        type: choice
        options:
          - "all"
          - "regroovio-signup"
          - "regroovio-confirm"
          - "regroovio-login"
          - "regroovio-random-tracks"
          - "regroovio-downloader"
          - "regroovio-recognizer"
          - "bandcamp-wishlist"
          - "bandcamp-collection"
          - "bandcamp-feed"
          - "bandcamp-daily"
          - "bandcamp-custom"
          - "spotify-token"
          - "spotify-get-top"
          - "spotify-get-likes"
          - "spotify-add-track"
          - "spotify-remove-track"
          - "spotify-get-playlist"
          - "spotify-get-audio-features"
          - "spotify-get-audio-analysis"
          - "spotify-search-track"
          - "spotify-login"
          - "spotify-callback"
          - "spotify-refresh"
        required: true

env:
  AWS_REGION: us-east-1

jobs:
  before_deploy:
    name: Before Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update Parameter Store
        run: |
          COGNITO_USER_POOL_ID=$(aws cognito-idp list-user-pools --max-results 20 | jq -r '.UserPools[] | select(.Name | contains("${{ inputs.stage }}")).Id')
          COGNITO_CLIENT_ID=$(aws cognito-idp list-user-pool-clients --user-pool-id ${COGNITO_USER_POOL_ID} --max-results 20 | jq -r '.UserPoolClients[] | select(.ClientName | contains("${{ inputs.stage }}")) | .ClientId')
          COGNITO_CLIENT_SECRET=$(aws cognito-idp describe-user-pool-client --user-pool-id ${COGNITO_USER_POOL_ID} --client-id ${COGNITO_CLIENT_ID} | jq -r '.UserPoolClient.ClientSecret')
          aws ssm put-parameter \
            --name "parameters-${{ inputs.stage }}" \
            --type "String" \
            --value "
            COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID},
            COGNITO_CLIENT_ID=${COGNITO_CLIENT_ID},
            COGNITO_CLIENT_SECRET=${COGNITO_CLIENT_SECRET},
            STAGE=${{ inputs.stage }},
            ${{ secrets.LAMBDAS_ENV }}" \
            --overwrite

  filter_functions:
    runs-on: ubuntu-latest
    needs: [before_deploy]
    outputs:
      available_functions: ${{ steps.filter_functions.outputs.filtered_functions }}
    timeout-minutes: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Filter functions
        id: filter_functions
        run: |
          selected_function="${{ github.event.inputs.functions }}"
          if [ "$selected_function" = "all" ]; then
            available_functions=$(cat ./lambdas.json)
            available_functions_no_spaces=$(echo "$available_functions" | tr -d '[:space:]')
          else
            available_functions=$(jq -c '.[] | select(.name == '\"$selected_function\"')' ./lambdas.json)
            available_functions_no_spaces=$(echo "$available_functions" | tr -d '[:space:]')
          fi

          echo $available_functions_no_spaces
          echo "filtered_functions=${available_functions_no_spaces}" >> $GITHUB_OUTPUT

  # deploy_lambdas:
  #   runs-on: ubuntu-latest
  #   needs: [before_deploy, filter_functions]
  #   strategy:
  #     matrix:
  #       function: ${{fromJson(needs.filter_functions.outputs.available_functions)}}

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION }}

  #     - name: Install dependencies
  #       run: |
  #         cd ${{ matrix.function.path }}
  #         npm ci --production

  #     - name: Cache Node modules
  #       uses: actions/cache@v3
  #       with:
  #         path: ${{ matrix.function.path }}/node_modules
  #         key: ${{ matrix.function.path }}-${{ inputs.stage }}-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ matrix.function.path }}-${{ inputs.stage }}-

  #     - name: Package Lambda function
  #       run: |
  #         cd ${{ matrix.function.path }}
  #         zip -r ${{ matrix.function.name }}-${{ inputs.stage }}.zip .
  #         aws s3 cp ${{ matrix.function.name }}-${{ inputs.stage }}.zip s3://lambdas-regroovio-${{ inputs.stage }}
  #         rm ${{ matrix.function.name }}-${{ inputs.stage }}.zip

  #     - name: Update Lambda function code
  #       run: |
  #         aws lambda update-function-code \
  #           --function-name ${{ matrix.function.name }}-${{ inputs.stage }} \
  #           --s3-bucket lambdas-regroovio-${{ inputs.stage }} \
  #           --s3-key ${{ matrix.function.name }}-${{ inputs.stage }}.zip

  #     - name: Wait for Lambda update
  #       run: |
  #         aws lambda wait function-updated --function-name ${{ matrix.function.name }}-${{ inputs.stage }}

  #     - name: Update Lambda function configuration
  #       run: |
  #         aws lambda update-function-configuration \
  #         --function-name ${{ matrix.function.name }}-${{ inputs.stage }} \
  #         --region us-east-1 \
  #         --environment "Variables={
  #         STAGE=\"${{ inputs.stage }}\",
  #         ${{ secrets.LAMBDAS_ENV }}
  #         }"
