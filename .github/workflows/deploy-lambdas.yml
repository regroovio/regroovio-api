name: Deploy Lambdas

on:
  workflow_call:
    inputs:
      stage:
        description: "The stage to deploy to (prod or dev)"
        required: true
        type: string
      functions:
        description: "The function to deploy"
        required: true
        type: string

  workflow_dispatch:
    inputs:
      stage:
        description: "The stage to deploy to (prod or dev)"
        type: choice
        options:
          - prod
          - dev
        required: true

      functions:
        description: "The function to deploy"
        type: choice
        options:
          - "all"
          - "regroovio-signup"
          - "regroovio-confirm"
          - "regroovio-validate"
          - "regroovio-login"
          - "regroovio-random-tracks"
          - "regroovio-random-images"
          - "bandcamp-wishlist"
          - "bandcamp-collection"
          - "bandcamp-feed"
          - "bandcamp-daily"
          - "bandcamp-custom"
          - "spotify-scrap-token"
          - "spotify-get-top"
          - "spotify-get-likes"
          - "spotify-add-track"
          - "spotify-remove-track"
          - "spotify-get-playlist"
          - "spotify-get-audio-features"
          - "spotify-get-audio-analysis"
          - "spotify-search-track"
          - "spotify-login"
          - "spotify-callback"
          - "spotify-refresh"
        required: true

env:
  AWS_REGION: us-east-1

jobs:
  filter_functions:
    name: Filter Functions
    runs-on: ubuntu-latest
    outputs:
      available_functions: ${{ steps.filter_functions.outputs.filtered_functions }}
    timeout-minutes: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Filter functions
        id: filter_functions
        run: |
          selected_function="${{ github.event.inputs.functions }}"
          if [ "$selected_function" = "all" ]; then
            available_functions=$(cat ./lambdas.json)
            available_functions_no_spaces=$(echo "$available_functions" | tr -d '[:space:]')
          else
            available_functions=$(jq -c '.[] | select(.name == '\"$selected_function\"')' ./lambdas.json) 
            available_functions_no_spaces=[$(echo "$available_functions" | tr -d '[:space:]')]
            
          fi
          echo $available_functions_no_spaces
          echo "filtered_functions=${available_functions_no_spaces}" >> $GITHUB_OUTPUT

  deploy_lambdas:
    name: Deploy Lambdas
    runs-on: ubuntu-latest
    needs: [filter_functions]
    strategy:
      matrix:
        function: ${{fromJson(needs.filter_functions.outputs.available_functions)}}

    steps:
      - name: Cancel Workflow Action
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ secrets.GH_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: cd ${{ matrix.function.path }} && npm install

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ${{ matrix.function.path }}/node_modules
          key: ${{ matrix.function.path }}-${{ inputs.stage }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ matrix.function.path }}-${{ inputs.stage }}-

      - name: Package Lambda function
        run: |
          cd ${{ matrix.function.path }}
          zip -r ${{ matrix.function.name }}-${{ inputs.stage }}.zip .
          aws s3 cp ${{ matrix.function.name }}-${{ inputs.stage }}.zip s3://regroovio-lambdas-${{ inputs.stage }}
          rm ${{ matrix.function.name }}-${{ inputs.stage }}.zip

      - name: Update Lambda function code
        run: |
          aws lambda update-function-code \
            --function-name ${{ matrix.function.name }}-${{ inputs.stage }} \
            --s3-bucket regroovio-lambdas-${{ inputs.stage }} \
            --s3-key ${{ matrix.function.name }}-${{ inputs.stage }}.zip

      - name: Wait for Lambda update
        run: aws lambda wait function-updated --function-name ${{ matrix.function.name }}-${{ inputs.stage }}
