name: Deploy ECS

on:
  workflow_call:
    inputs:
      stage:
        description: "The stage to deploy to (prod or dev)"
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

  workflow_dispatch:
    inputs:
      stage:
        description: "The stage to deploy to (prod or dev)"
        type: choice
        options:
          - prod
          - dev
        required: true

env:
  AWS_REGION: us-east-1

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tasks:
          [
            task:
              {
                TASK: "downloader-task-definition-${{ inputs.stage }}",
                SERVICE: "downloader-service-${{ inputs.stage }}",
                CLUSTER: "${{ inputs.stage }}-ecs-cluster",
              },
            task:
              {
                TASK: "recognizer-task-definition-${{ inputs.stage }}",
                SERVICE: "recognizer-service-${{ inputs.stage }}",
                CLUSTER: "${{ inputs.stage }}-ecs-cluster",
              },
          ]

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}}

      - name: Login to Amazon ECR
        id: login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login.outputs.registry }}
          ECR_REPOSITORY: regroovio
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
          docker build -t $IMAGE .
          docker push $IMAGE

      - name: Download definitions
        run: aws ecs describe-task-definition --task-definition ${{ matrix.tasks.task.TASK }} | jq '.taskDefinition' > ${{ matrix.tasks.task.TASK }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ matrix.tasks.task.TASK }}
          container-name: ${{ matrix.tasks.task.SERVICE }}
          image: ${{ env.IMAGE }}
