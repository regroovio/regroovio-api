name: Deploy ECS

on:
  workflow_call:
    inputs:
      stage:
        description: "The stage to deploy to (prod or dev)"
        required: true
        type: string

  workflow_dispatch:
    inputs:
      stage:
        description: "The stage to deploy to (prod or dev)"
        type: choice
        options:
          - prod
          - dev
        required: true

env:
  AWS_REGION: us-east-2

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task: ["downloader", "recognizer"]

    steps:
      - name: Cancel Workflow Action
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ secrets.GH_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        run: |
          cd main/app/${{ matrix.task }}
          IMAGE="${{ steps.login.outputs.registry }}/${{ matrix.task }}-${{ inputs.stage }}:${{ github.sha }}"
          LATEST_IMAGE="${{ steps.login.outputs.registry }}/${{ matrix.task }}-${{ inputs.stage }}:latest"
          echo $IMAGE
          docker build -t $IMAGE .
          docker tag $IMAGE $LATEST_IMAGE
          docker push $IMAGE
          docker push $LATEST_IMAGE

      - name: Download definitions
        run: aws ecs describe-task-definition --task-definition ${{ matrix.task }}-${{ inputs.stage }} | jq '.taskDefinition' > ${{ matrix.task }}-${{ inputs.stage }}.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ matrix.task }}-${{ inputs.stage }}.json
          container-name: ${{ matrix.task }}-${{ inputs.stage }}
          image: "${{ steps.login.outputs.registry }}/${{ matrix.task }}-${{ inputs.stage }}:latest"

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          service: ${{ matrix.task }}-service-${{ inputs.stage }}
          cluster: "regroovio-${{ inputs.stage }}"
          task-definition: ${{ steps.task.outputs.task-definition }}
